namespace sample;

/*
#######################################################################
# Copyright (C)2012, International Business Machines Corporation and
# others. All Rights Reserved.
#######################################################################
*/

use com.ibm.streamsx.tcp::TCPServer;

// Test SPL application demostrating the usage of the TCPServer operator
// This composite sends string or binary data via TCPSink operators and 
// that data will be received by the TCPReceiver application.
//
// You must first start the TCPReceiver application and after that
// start this TCPSender application.
composite TCPSender
{
    graph
        // ========================================================================================================= 
        // Target this data to be sent to the very first TCPServer operator instance in the TCPReceiver application.
        // This is the first client connection we are making to the TCPServer instance 1.
        stream<rstring stringData> Data1a = Custom() {
           logic
              onProcess: {
                 mutable int32 cnt = 0;
                 mutable Data1a oTuple = {};
                 // Sleep for 5 seconds as initDelay.
                 block(5.0);

                 while((isShutdown() == false) && (cnt++ < 5)) {
                    oTuple.stringData = "Data1a_" + (rstring)cnt;
                    submit(oTuple, Data1a);
                 }
              }
        }

        // Target this data to be sent to the very first TCPServer operator instance in the TCPReceiver application.
        // This is the second client connection we are making to the TCPServer instance 1.
        stream<rstring stringData> Data1b = Custom() {
           logic
              onProcess: {
                 mutable int32 cnt = 0;
                 mutable Data1b oTuple = {};
                 // Sleep for 5 seconds as initDelay.
                 block(5.0);

                 while((isShutdown() == false) && (cnt++ < 5)) {
                    oTuple.stringData = "Data1b_" + (rstring)cnt;
                    submit(oTuple, Data1b);
                 }
              }
        }

        // Send it to the TCPServer instance 1 listening on the resolvable IP address for the
        // fully qualified name of the target machine.
        () as Sender1 = TCPSink(Data1a, Data1b as Data1) {
           param
              address: getHostName();
              port: 22222u;
              role: client;
              flush: 1u;
              quoteStrings: false;
        }
        // ========================================================================================================= 


        // ========================================================================================================= 
        // Target this data to be sent to the second TCPServer operator instance in the TCPReceiver application.
        // This is the first client connection we are making to the TCPServer instance 2.
        stream<rstring stringData> Data2a = Custom() {
           logic
              onProcess: {
                 mutable int32 cnt = 0;
                 mutable Data2a oTuple = {};
                 // Sleep for 5 seconds as initDelay.
                 block(5.0);

                 while((isShutdown() == false) && (cnt++ < 5)) {
                    oTuple.stringData = "Data2a_" + (rstring)cnt;
                    submit(oTuple, Data2a);
                 }
              }
        }

        // Target this data to be sent to the second TCPServer operator instance in the TCPReceiver application.
        // This is the second client connection we are making to the TCPServer instance 2.
        stream<rstring stringData> Data2b = Custom() {
           logic
              onProcess: {
                 mutable int32 cnt = 0;
                 mutable Data2b oTuple = {};
                 // Sleep for 5 seconds as initDelay.
                 block(5.0);

                 while((isShutdown() == false) && (cnt++ < 5)) {
                    oTuple.stringData = "Data2b_" + (rstring)cnt;
                    submit(oTuple, Data2b);
                 }
              }
        }

        // Send it to the TCPServer instance 2 listening on the resolvable IP address for the
        // fully qualified name of the target machine.
        () as Sender2 = TCPSink(Data2a, Data2b as Data2) {
           param
              address: getHostName();
              port: 33333u;
              role: client;
              flush: 1u;
              quoteStrings: false;
        }
        // ========================================================================================================= 


        // ========================================================================================================= 
        // Target this data to be sent to the third TCPServer operator instance in the TCPReceiver application.
        // This is the first client connection we are making to the TCPServer instance 3.
        stream<rstring stringData> Data3a = Custom() {
           logic
              onProcess: {
                 mutable int32 cnt = 0;
                 mutable Data3a oTuple = {};
                 // Sleep for 5 seconds as initDelay.
                 block(5.0);

                 while((isShutdown() == false) && (cnt++ < 5)) {
                    // It will be received as binary data at the other end.
                    oTuple.stringData = "Data3a_" + (rstring)cnt;
                    submit(oTuple, Data3a);
                 }
              }
        }

        // Target this data to be sent to the third TCPServer operator instance in the TCPReceiver application.
        // This is the second client connection we are making to the TCPServer instance 3.
        stream<rstring stringData> Data3b = Custom() {
           logic
              onProcess: {
                 mutable int32 cnt = 0;
                 mutable Data3b oTuple = {};
                 // Sleep for 5 seconds as initDelay.
                 block(5.0);

                 while((isShutdown() == false) && (cnt++ < 5)) {
                    // It will be received as binary data at the other end.
                    oTuple.stringData = "Data3b_" + (rstring)cnt;
                    submit(oTuple, Data3b);
                 }

                 printStringLn("Finished sending the test data to the receiver application's TCPServer operator instances.");
                 printStringLn("You can now check inside the data directory for the results logged by the receiver application.");
              }
        }

        // Send it to the TCPServer instance 3 listening on the localhost address of the the target machine.
        // (In this case, both the sender and receiver must run on the same physical machine.)
        () as Sender3 = TCPSink(Data3a, Data3b as Data3) {
           param
              address: "localhost";
              port: 44444u;
              role: client;
              flush: 1u;
              quoteStrings: false;
        }
        // ========================================================================================================= 

        // We are done sending. It is time now to check the results in the Sample/data directory.
}
