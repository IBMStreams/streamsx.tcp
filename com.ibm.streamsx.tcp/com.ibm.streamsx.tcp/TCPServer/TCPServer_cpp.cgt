<%
#######################################################################
# Copyright (C)2012, 2015 International Business Machines Corporation and  
# others. All Rights Reserved.                                    
#######################################################################  
%>

/* Additional includes go here */
#include <SPL/Runtime/Function/UtilFunctions.h>
#include <streams_boost/thread.hpp>
#include <streams_boost/bind.hpp>
#include <streams_boost/shared_ptr.hpp>
#include <streams_boost/algorithm/string/predicate.hpp>
#include <stdlib.h>
#include "mcts/data_item.h"


<%
  use TCPServerCommon;
  TCPServerCommon::verify($model);
%>

<%SPL::CodeGen::implementationPrologue($model);%>

using namespace SPL;

<%
  my $port = $model->getParameterByName("port")->getValueAt(0)->getCppExpression();
  my $threadPoolSize = $model->getParameterByName("threadPoolSize")->getValueAt(0)->getCppExpression();
  my $connectionCap = $model->getParameterByName("connectionCap");
  if (not defined($connectionCap)) {
      $connectionCap = "std::numeric_limits<std::size_t>::max()";
  } else {
      $connectionCap = $connectionCap->getValueAt(0)->getCppExpression();
  }
  my $blockSize = $model->getParameterByName("blockSize");
  if (not defined($blockSize)) {
      $blockSize = 0;
  } else {
      $blockSize = $blockSize->getValueAt(0)->getCppExpression();
  }
  
  my $keepAlive = $model->getParameterByName("keepAlive");
  # Apply default value for keepAlive.
  $keepAlive = $keepAlive ? $keepAlive->getValueAt(0)->getCppExpression() : "";

  my $maxUnreadResponseCount = $model->getParameterByName("maxUnreadResponseCount");
  # Apply default value for maxUnreadResponseCount.
  $maxUnreadResponseCount = $maxUnreadResponseCount ? $maxUnreadResponseCount->getValueAt(0)->getCppExpression() : 100;

  # Apply default value for connReadOnly.
  my $makeConnReadOnly = 'true';
  my $disableDuplexConnection = $model->getParameterByName("disableDuplexConnection");
  $makeConnReadOnly = 'false' if ($disableDuplexConnection && $disableDuplexConnection->getValueAt(0)->getSPLExpression() eq 'shutdown');

	my $oport0 = $model->getOutputPortAt(0);
  	my $oport1 = $model->getOutputPortAt(1);
  	
  	my $iport0 = $model->getInputPortAt(0);
%>

	<%if ($oport0->getAttributeByName("line")){%>
		mcts::outFormat_t MY_OPERATOR::outFormat_ = mcts::line;
	<%}else{%>
		mcts::outFormat_t MY_OPERATOR::outFormat_ = mcts::block;
	<%}%>

__thread MY_OPERATOR::OPort0Type * MY_OPERATOR::otuple0_ = NULL;

<%if ($oport1) {%>
__thread MY_OPERATOR::OPort1Type * MY_OPERATOR::otuple1_ = NULL;
<%}%>


<%
	my $address = $model->getParameterByName("address");
	if (not defined($address)) {
		$address = "SPL::Functions::Utility::getHostName().string()";
	}else{
		$address = $address->getValueAt(0)->getCppExpression();
	}
%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
    : server_(
              <%=$address%>, 
              <%=$port%>, <%=$threadPoolSize%>, <%=$connectionCap%>, <%=$maxUnreadResponseCount%>,
              <%=$blockSize%>,  MY_OPERATOR::outFormat_, <%=defined($iport0) ? 'true' : 'false'%>, <%=$makeConnReadOnly%>,
              streams_boost::bind(&MY_OPERATOR::handleData, this, _1, _2, _3) ,
              streams_boost::bind(&MY_OPERATOR::handleError, this, _1, _2, _3) ,
              streams_boost::bind(&MY_OPERATOR::handleInfo, this, _1, _2, _3) ,
              streams_boost::bind(&MY_OPERATOR::handleMetrics, this, _1, _2)
              ),
	  opm_(getContext().getMetrics())
{
    // Initialization code goes here
    // If the user provided a KeepAlive parameter, we can set that now.
    <%if ($keepAlive ne "") {%>
       server_.setKeepAlive(<%=$keepAlive%>.get_time(), <%=$keepAlive%>.get_probes(), <%=$keepAlive%>.get_interval());
    <%}%>

}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
    SPL::AutoMutex am(mutex_);
    for (size_t i=0, iu=otuples0_.size(); i<iu; ++i)
        delete otuples0_[i];
<%if ($oport1) {%>
    for (size_t i=0, iu=otuples1_.size(); i<iu; ++i)
        delete otuples1_[i];
<%}%>
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    createThreads(1); // Create source thread
}
 
// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    if(!getPE().getShutdownRequested()) 
        server_.run();
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    server_.stop();
}

// For handling data from the server
void MY_OPERATOR::handleData(std::string & line, std::string const & ipAddress, uint32_t port)
{
    if(otuple0_==NULL) {
        otuple0_ = new OPort0Type();
        SPL::AutoMutex am(mutex_);
        otuples0_.push_back(otuple0_);
    }

	//splBlob_ = SPL::Functions::String::convertToBlob(line);
    
    <%if ($oport0->getAttributeByName("line")) {%>	
	    otuple0_->get_line() = line;
    <%}%>

    <%if ($oport0->getAttributeByName("block")) {%>	
	    otuple0_->get_block() = SPL::Functions::String::convertToBlob(line);
    <%}%>



    <%if ($oport0->getAttributeByName("srcIP")) {%>
        otuple0_->get_srcIP() = ipAddress;
    <%}%>
    <%if ($oport0->getAttributeByName("srcPort")) {%>
        otuple0_->get_srcPort() = port;
    <%}%>
    submit(*otuple0_, 0); 
}

// For handling connection status info from the server
void MY_OPERATOR::handleInfo(std::string const & status, std::string const & ipAddress, uint32_t port)
{

	//SPLLOG(L_ERROR,"TCPServer, connection status: " << status << ":" << ipAddress << ":" << port << "!", "handleInfo");

	<%if ($oport1) {%>
    if(otuple1_==NULL) {
        otuple1_ = new OPort1Type();
        SPL::AutoMutex am(mutex_);
        otuples1_.push_back(otuple1_);
    }
    
    if ( status == "disconnected") {
	submit(Punctuation::WindowMarker, 0);
    }
    otuple1_->get_status() = status;
    otuple1_->get_srcIP() = ipAddress;
    otuple1_->get_srcPort() = port;
    submit(*otuple1_, 1); 
    <%}%>
}

void MY_OPERATOR::handleWrite(std::string const & line, std::string const & ipAddress, uint32_t port)
{
	SPL::blob raw(reinterpret_cast<unsigned char const *>(line.data()), line.size());	
	if (!streams_boost::algorithm::ends_with(line, "\n")){
		raw += atoi("\n");
	}	
	server_.handleWrite(raw, true, ipAddress, port);
}

void MY_OPERATOR::handleWrite(SPL::blob const & raw, std::string const & ipAddress, uint32_t port)
{
	server_.handleWrite(const_cast<SPL::blob &>(raw), false, ipAddress, port);
}
// Send the data unadulterated - raw
void MY_OPERATOR::handleRawWrite(SPL::blob const & raw, std::string const & ipAddress, uint32_t port)
{
	server_.handleWrite(const_cast<SPL::blob &>(raw), true, ipAddress, port);
}

void MY_OPERATOR::handleError(const streams_boost::system::error_code& e, std::string const & ipAddress, uint32_t port)
{
//	SPLAPPTRC(L_ERROR, "Data is sent to " << ipAddress << ":" << port, "TCPServer");
	if (e) {
		if (e == streams_boost::asio::error::would_block) {
			SPLAPPTRC(L_ERROR, "responseDisabled: Unresponsive client on " << ipAddress << ":" << port << "\n" << e.message(), "TCPServer");
			handleInfo("responseDisabled", ipAddress, port);
		}
		else {
			SPLAPPTRC(L_ERROR, "responseError: Unable to send data to " << ipAddress << ":" << port << "\n" << e.message(), "TCPServer");
			handleInfo("responseError", ipAddress, port);
		}
	}
	else {
		handleMetrics(1, 1);
	}
}

void MY_OPERATOR::handleMetrics(uint32_t kind, int64_t value)
{
	switch(static_cast<MetricKind>(kind)) {
		case N_CONNECTIONS:
			opm_.getCustomMetricByName("nConnections").setValueNoLock(value);
			break;
		case N_RESPONSES:
			opm_.getCustomMetricByName("nResponses").incrementValue();
	}
}


// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
	<%if ($iport0) {%>
	const IPort0Type& t = (const IPort0Type&) tuple;
	
	// get dest server
	<%if ($iport0->getAttributeByName("srcIP")){%>
	const std::string destIp = t.get_srcIP();
	<%}%>
	
	// get dest IP
	<%if ($iport0->getAttributeByName("srcPort")){%>
	const uint32_t destPort = (uint32_t)t.get_srcPort();
	<%}%>

	
	// if data is rstring, call handleWrite(string, ipAddress, port)
	<%
	# How do you get the value of format at compile time?? 
	%>
	<%if ($iport0->getAttributeByName("line")){%>
		std::string const & line = t.get_line();  // line
		handleWrite(line, destIp, destPort);
	<%} else {%>
     // else if idata is a blob, call handleWrite(blob, ipAddress, port)
		SPL::blob const & block = t.get_block();        
        if ("block" == param$format$0) {
			handleWrite(block, destIp, destPort);  // block 
			// std::cout << "block" << std::endl;			
		} else {
			handleRawWrite(block, destIp, destPort);  // raw
			// std::cout << "raw" << std::endl;
		}	 
	<%}%>
	<%}%>	
}

<%SPL::CodeGen::implementationEpilogue($model);%>


