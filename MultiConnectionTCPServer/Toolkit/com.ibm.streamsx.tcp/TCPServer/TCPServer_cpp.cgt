<%
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2012 
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with
# IBM Corp.
%>

/* Additional includes go here */
#include <streams_boost/bind.hpp>
#include "mcts/data_item.h"

<%
  use TCPServerCommon;
  TCPServerCommon::verify($model);
%>

<%SPL::CodeGen::implementationPrologue($model);%>

<%
  my $port = $model->getParameterByName("port")->getValueAt(0)->getCppExpression();
  my $threadPoolSize = $model->getParameterByName("threadPoolSize")->getValueAt(0)->getCppExpression();
  my $connectionCap = $model->getParameterByName("connectionCap");
  if (not defined($connectionCap)) {
      $connectionCap = "std::numeric_limits<std::size_t>::max()";
  } else {
      $connectionCap = $connectionCap->getValueAt(0)->getCppExpression();
  }
  my $blockSize = $model->getParameterByName("blockSize");
  if (not defined($blockSize)) {
      $blockSize = 0;
  } else {
      $blockSize = $blockSize->getValueAt(0)->getCppExpression();
  }

  my $keepAlive = $model->getParameterByName("keepAlive");
  # Apply default value for keepAlive.
  $keepAlive = $keepAlive ? $keepAlive->getValueAt(0)->getCppExpression() : "";

	my $oport0 = $model->getOutputPortAt(0);
  	my $oport1 = $model->getOutputPortAt(1);

%>

	<%if ($oport0->getAttributeByName("line")){%>
		mcts::outFormat_t MY_OPERATOR::outFormat_ = mcts::line;
	<%}else{%>
		mcts::outFormat_t MY_OPERATOR::outFormat_ = mcts::block;
	<%}%>

__thread MY_OPERATOR::OPort0Type * MY_OPERATOR::otuple0_ = NULL;

<%if ($oport1) {%>
__thread MY_OPERATOR::OPort1Type * MY_OPERATOR::otuple1_ = NULL;
<%}%>


<%
	my $address = $model->getParameterByName("address");
	if (not defined($address)) {
		$address = "SPL::Functions::Utility::getHostName().string()";
	}else{
		$address = $address->getValueAt(0)->getCppExpression();
	}
%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
    : server_(
              <%=$address%>, 
              <%=$port%>, <%=$threadPoolSize%>, <%=$connectionCap%>, <%=$blockSize%>,  MY_OPERATOR::outFormat_,
              streams_boost::bind(&MY_OPERATOR::handleData, this, _1, _2, _3) ,
              streams_boost::bind(&MY_OPERATOR::handleInfo, this, _1, _2, _3)
              )
{
    // Initialization code goes here
    // If the user provided a KeepAlive parameter, we can set that now.
    <%if ($keepAlive ne "") {%>
       server_.setKeepAlive(<%=$keepAlive%>.get_time(), <%=$keepAlive%>.get_probes(), <%=$keepAlive%>.get_interval());
    <%}%>

}

// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
    // Finalization code goes here
    SPL::AutoMutex am(mutex_);
    for (size_t i=0, iu=otuples0_.size(); i<iu; ++i)
        delete otuples0_[i];
<%if ($oport1) {%>
    for (size_t i=0, iu=otuples1_.size(); i<iu; ++i)
        delete otuples1_[i];
<%}%>
}

// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
    createThreads(1); // Create source thread
}
 
// Processing for source and threaded operators   
void MY_OPERATOR::process(uint32_t idx)
{
    if(!getPE().getShutdownRequested()) 
        server_.run();
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
    server_.stop();
}

// For handling data from the server
void MY_OPERATOR::handleData(std::string & line, std::string const & ipAddress, uint32_t port)
{
    if(otuple0_==NULL) {
        otuple0_ = new OPort0Type();
        SPL::AutoMutex am(mutex_);
        otuples0_.push_back(otuple0_);
    }

	//splBlob_ = SPL::Functions::String::convertToBlob(line);
    
    <%if ($oport0->getAttributeByName("line")) {%>	
	    otuple0_->get_line() = line;
    <%}%>

    <%if ($oport0->getAttributeByName("block")) {%>	
	    otuple0_->get_block() = SPL::Functions::String::convertToBlob(line);
    <%}%>


    <%if ($oport0->getAttributeByName("srcIP")) {%>
        otuple0_->get_srcIP() = ipAddress;
    <%}%>
    <%if ($oport0->getAttributeByName("srcPort")) {%>
        otuple0_->get_srcPort() = port;
    <%}%>
    submit(*otuple0_, 0); 
}

// For handling connection status info from the server
void MY_OPERATOR::handleInfo(std::string const & status, std::string const & ipAddress, uint32_t port)
{

	//SPLLOG(L_ERROR,"TCPServer, connection status: " << status << ":" << ipAddress << ":" << port << "!", "handleInfo");

	<%if ($oport1) {%>
    if(otuple1_==NULL) {
        otuple1_ = new OPort1Type();
        SPL::AutoMutex am(mutex_);
        otuples1_.push_back(otuple1_);
    }
    
    if ( status == "disconnected") {
	submit(Punctuation::WindowMarker, 0);
    }
    otuple1_->get_status() = status;
    otuple1_->get_srcIP() = ipAddress;
    otuple1_->get_srcPort() = port;
    submit(*otuple1_, 1); 
    <%}%>
}

<%SPL::CodeGen::implementationEpilogue($model);%>

